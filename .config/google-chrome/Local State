{
   "app_list": {
      "app_launch_count": 0,
      "last_app_launch_ping": "13074048000000000",
      "last_launch_ping": "13074048000000000",
      "launch_count": 0
   },
   "background_mode": {
      "enabled": false
   },
   "browser": {
      "enabled_labs_experiments": [  ],
      "last_redirect_origin": ""
   },
   "geolocation": {
      "access_token": {

      }
   },
   "gl_renderer_string": "Mesa DRI Intel(R) Sandybridge Mobile ",
   "gl_vendor_string": "Intel Open Source Technology Center",
   "gl_version_string": "3.0 Mesa 10.1.3",
   "hardware_acceleration_mode_previous": true,
   "local_state": {
      "multiple_profile_prefs_version": 7
   },
   "network_time": {
      "network_time_mapping": {
         "local": 1429651792290.22,
         "network": 1429651792103.872
      }
   },
   "ntp": {
      "promo_resource_cache_update": "1429648908.263761"
   },
   "policy": {
      "last_statistics_update": "13074122503262362"
   },
   "profile": {
      "info_cache": {
         "Default": {
            "active_time": 1429651792.117446,
            "avatar_icon": "chrome://theme/IDR_PROFILE_AVATAR_0",
            "background_apps": true,
            "gaia_given_name": "Thomas",
            "gaia_name": "Thomas DuPlessis",
            "gaia_picture_file_name": "Google Profile Picture.png",
            "is_ephemeral": false,
            "is_omitted_from_profile_list": false,
            "is_using_default_avatar": false,
            "is_using_default_name": true,
            "managed_user_id": "",
            "name": "Person 1",
            "user_name": "ThomasDuPlessis555@gmail.com"
         }
      },
      "last_active_profiles": [ "Default" ],
      "last_used": "Default"
   },
   "protocol_handler": {
      "excluded_schemes": {
         "afp": true,
         "data": true,
         "disk": true,
         "disks": true,
         "file": true,
         "hcp": true,
         "javascript": true,
         "magnet": false,
         "mailto": false,
         "ms-help": true,
         "news": false,
         "nntp": true,
         "shell": true,
         "snews": false,
         "vbscript": true,
         "view-source": true,
         "vnd": {
            "ms": {
               "radio": true
            }
         }
      }
   },
   "rappor": {
      "cohort_seed": 131,
      "secret": "Ohy4C09TOeGycnMGAWtZXkC7cWW5v6e45JyzFAJa/qnAXhzs2Exi7gAdt/gxKqSp"
   },
   "show-first-run-bubble-option": 0,
   "shutdown": {
      "num_processes": 9,
      "num_processes_slow": 8,
      "type": 1
   },
   "uninstall_metrics": {
      "installation_date2": "1408903497",
      "launch_count": "136"
   },
   "user_experience_metrics": {
      "low_entropy_source2": 561,
      "session_id": 135,
      "stability": {
         "breakpad_registration_fail": 135,
         "child_process_crash_count": 0,
         "crash_count": 0,
         "debugger_not_present": 135,
         "execution_phase": 700,
         "exited_cleanly": true,
         "extension_renderer_crash_count": 0,
         "incomplete_session_end_count": 1,
         "last_timestamp_sec": "1429651792",
         "launch_count": 17,
         "launch_time_sec": "1429651613",
         "page_load_count": 0,
         "plugin_stats2": [ {
            "crashes": 0,
            "instances": 0,
            "launches": 2,
            "loading_errors": 0,
            "name": "Shockwave Flash"
         } ],
         "renderer_crash_count": 0,
         "renderer_hang_count": 0,
         "session_end_completed": true,
         "stats_buildtime": "1425698509",
         "stats_version": "41.0.2272.89-64"
      }
   },
   "variations_last_fetch_time": "13074125392290230",
   "variations_seed": "",
   "variations_seed_date": "13074125392000000",
   "variations_seed_signature": "MEYCIQDNfxeaBspdTcXCTCtjdsScpqT73opt1mpQ6ZifFXUgmQIhAKAvnkU13zaY3zrnj21jWUwONyaF5vBOqh1rWxNwU1IC",
   "was": {
      "restarted": false
   }
}
